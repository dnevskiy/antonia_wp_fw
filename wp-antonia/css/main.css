/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */img,legend{border:0}pre,textarea{overflow:auto}legend,td,th{padding:0}pre,pre code{background:#aeb1b5;color:#69707a}.container,.item-hover .item,sub,sup{position:relative}html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent;cursor:pointer;text-decoration:none}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,optgroup,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}sub,sup{font-size:75%;line-height:0;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{vertical-align:bottom;max-width:100%}svg:not(:root){overflow:hidden}figure{margin:1em 40px}pre{white-space:pre;word-wrap:normal}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0;vertical-align:baseline}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}table{border-collapse:collapse;border-spacing:0;width:100%}.clearfix:before,.contacts .form:before,.qosection-contacts:before,.qosection-slider:before,.qosection-whyus:before,.qosection-works:before,.slides:before,.works:before{content:' ';display:table}.clearfix:after,.contacts .form:after,.qosection-contacts:after,.qosection-slider:after,.qosection-whyus:after,.qosection-works:after,.slides:after,.works:after{content:' ';display:table;clear:both}.btn,pre code{display:block}*,:after,:before{box-sizing:inherit}html{box-sizing:border-box;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;min-width:300px;overflow-x:hidden;overflow-y:scroll;text-rendering:optimizeLegibility}html.has-modal-open{overflow:hidden}body,button,input,select,textarea{font-family:"Open Sans",sans-serif}::-moz-selection{color:#fcfcfc;background-color:#1fc8db}::-moz-selection,::selection{color:#fcfcfc;background-color:#1fc8db}code,pre{-moz-osx-font-smoothing:auto;-webkit-font-smoothing:auto;line-height:1.25}body{margin:0;font-family:Roboto,sans-serif;font-weight:300;font-size:14px;font-size:.875rem;line-height:1.42857}code{background:#aeb1b5;color:red;font-size:12px;font-weight:400;padding:1px 2px 2px}hr{box-sizing:content-box;height:0;border-top-color:#aeb1b5;margin:20px 0}small{font-size:11px}strong,table th{color:#222324}pre code{overflow-x:auto;padding:16px 20px}table td,table th{text-align:left;vertical-align:top}.contacts h2,.fa,.root-footer,.slide{text-align:center}.block:not(:last-child),.content:not(:last-child){margin-bottom:20px}.fa{font-size:21px;vertical-align:top}.content h1,.content h2,.content h3,.content h4,.content h5,.content h6{color:#222324;font-weight:300;line-height:1.125;margin-bottom:20px}.content h1:not(:first-child),.content h2:not(:first-child),.content h3:not(:first-child){margin-top:40px}.content h1{font-size:48px;font-size:3rem}.content h2{font-size:42px;font-size:2.625rem;font-weight:100}.content h3{font-size:20px;font-size:1.25rem;font-weight:400}.content h4{font-size:16px;font-size:1rem}.content h5{font-size:14px;font-size:.875rem}.content h6{font-size:11px;font-size:.6875rem}.content p:not(:last-child){margin-bottom:16px}.content li+li{margin-top:4px}.content ol{list-style:decimal;margin:16px 32px}.content ul{list-style:disc;margin:16px 32px}.content ul ul{list-style-type:circle;margin-top:8px}.content ul ul ul{list-style-type:square}.content blockquote{padding:24px}.content blockquote:not(:last-child){margin-bottom:16px}@media print{blockquote,img,pre,tr{page-break-inside:avoid}*,:after,:before{background:0 0!important;color:#000!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:"(" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}a[href^='#']:after,a[href^='javascript:']:after{content:''}blockquote,pre{border:1px solid #999}thead{display:table-header-group}img{max-width:100%!important}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}}.top-banner-widget{border:4px solid #f5f7fa}.item-hover{list-style-type:none;margin:0;padding:0}.item-hover .item{float:left;padding:0;overflow:hidden}.item-hover .item:hover .caption{opacity:1}.item-hover img{margin:0;padding:0;float:left;z-index:4}.item-hover .caption{cursor:pointer;position:absolute;opacity:0;transition:all .45s ease-in-out}.item-hover .blur{background-color:rgba(0,0,0,.65);width:345px;height:420px;z-index:5;position:absolute}.item-hover .caption-text h1{text-transform:uppercase;font-size:24px}.item-hover .caption-text{padding:22px;z-index:10;color:#fff;position:absolute;width:345px;height:420px}.ftr,.head{height:39px;width:100%}.btn{margin:40px 0;float:right;line-height:40px;padding:0 20px;text-decoration:none;border:1px solid #4c4c4c;border-radius:3px;color:#4c4c4c;font-weight:200;font-size:.95em;transition:all .3s}.contacts .form button,.contacts .form input,.contacts .form textarea{border:none;outline:0;display:block;font-weight:300;transition:all .3s}.btn:hover{background-color:#4c4c4c;color:#fff}.head{background-color:#f8f8f8}.ftr{background-color:#2f343b}.qosection-whyus,.qosection-works{background-color:#fff;padding-top:100px}.wrapper{width:90%;margin:0 auto}.qosection-works{background-image:url(../img/Qoderoom_Wo.png),url(../img/Qoderoom_main.jpg);background-position:15% 90px,top center;background-repeat:no-repeat,repeat-x}.qosection-slider{background-color:#fafafa;padding:100px 0}.works h2{color:#fff;margin-bottom:90px}.works .items{width:345px;margin:0 auto}@media only screen and (min-width:960px){.wrapper{max-width:90%}.works .items{width:690px}}@media only screen and (min-width:1440px){.wrapper{max-width:1380px}.works .items{width:1035px}}@media only screen and (min-width:2000px){.works .items{width:1380px}}.whyus h2{margin-bottom:90px;color:#484848}.whyus article{width:100%;margin-bottom:100px}.whyus .pict{height:50px}@media only screen and (min-width:960px){.whyus article{width:48.5%;float:left;margin-right:3%}.whyus article:nth-child(2n+1){margin-right:0}}@media only screen and (min-width:1440px){.whyus article,.whyus article:nth-child(2n+1){margin-right:3%}.whyus article{width:31.33333%;float:left}.whyus article:nth-child(3n+1){margin-right:0}}.slider{position:relative}.slides{margin:0 auto;padding:0 45px}.slide{width:17.6%;float:left;margin-right:3%}.to-left,.to-right{width:14px;height:20px;top:40%;position:absolute}.slide:last-child{margin-right:0}.to-left{background:url(../img/arrow-left.png)}.to-right{background:url(../img/arrow-right.png);right:0}.waves{background:url(../img/Qoderoom_main.png) no-repeat;width:1444px;height:1438px;position:absolute;top:-40%;left:50%;margin-left:-722px;pointer-events:none;z-index:1}.contacts,.root-form{position:relative}.root-form{z-index:2}.qosection-contacts{padding-top:100px;padding-bottom:100px;background-color:#fff;background-position:center bottom}.contacts .form{padding:30px 45px 15px;width:560px;background-color:#f2f2f2;margin:0 auto}.contacts .form input,.contacts .form textarea{background-color:#fff;color:#848484;box-sizing:border-box;font-size:1em;width:100%;margin-top:5px;margin-bottom:20px;padding:10px}.contacts .form textarea{resize:none}.contacts .form button{height:42px;text-transform:uppercase;font-size:16px;padding:0 70px;background-color:#e0536e;color:#fff;border-radius:3px;margin:10px auto}.contacts .form button:hover{color:#e0536e;background:#fff}#map{height:570px;width:4000px}body{border-top:solid 10px #1fc8db}.root{min-width:320px}.root-content:after{content:"";display:table;clear:both}.root-description{margin-top:10px;font-size:14px;line-height:1.2em}.root-footer{padding-top:40px;color:#aeb1b5}.root-footer .copyright,.root-footer-bottom{padding-top:25px}.root-footer a{color:#69707a}.root-footer a:hover{color:#999}
/*# sourceMappingURL=data:application/json;base64, */
