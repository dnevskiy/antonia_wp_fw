/*
 * https://web-design-weekly.com/2013/05/12/handy-sass-mixins/
 https://davidwalsh.name/write-media-queries-sass
 https://habrahabr.ru/post/156645/
 * -----------------------------------------------------------------------------
 */

/* Box Sizing 
  
  Usage:

  *,
  *:after,
  *:before {
    @include box-sizing(border-box);
  }

*/

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
}

/* Mixins for semi-transparent colors 
  
  Usage:

  @include alpha-attribute('color', rgba(255,0,0, 0.5), white);

*/

@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}

/* Mixins Box-shadow */

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

/* Mixins Media Query 
 
  Usege:

  .test {
    color: $antonia;
    @include bp(l) { color: $red; }
    @include bp(m) { color: $green; }
    @include bp(s) { color: $yellow; }
  }

*/

@mixin bp($point) {
      /* default styles here for older browsers. 
       I tend to go for a 600px - 960px width max but using percentages
    */
  @if $point == xl {
    @media only screen and (min-width: $xl) { @content; }
  }
  @if $point == l {
    @media only screen and (min-width: $l) { @content; }
  }
  @else if $point == m {
    @media only screen and (min-width: $m) { @content; }
  }
  @else if $point == s {
    @media only screen and (max-device-width: $s) { @content; }
  }
  @else if $point == port {
    @media only screen and (min-device-width: $short) and (max-device-width: $long) and (orientation:portrait) { @content; }
  }
  @else if $point == land {
   @media only screen and (min-device-width: $short) and (max-device-width: $long) and (orientation:landscape) { @content; }
  }
}

/**
 * Font size
 * -----------------------------------------------------------------------------
 * This mixin will take a pixel value and convert it into a em value
 * with a pixel fallback.
 *
 * Usage:
 *
 *      p {
 *          @include font-size(14px);
 *      }
 *
 * Output:
 *
 *      p {
 *          font-size: 14px;
 *          font-size: 0.8rem;
 *      }
 */

// @function calculateEm($size, $context: 16px) {
//     @return ($size / $context) * 1em;
// }

// @mixin font-size($size) {
//     font-size: $size;
//     font-size: calculateEm($size);
// }


@function calculateRem($size) {
  $remSize: $size / 16px;
  @return #{$remSize}rem;
}
@mixin font-size($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
}

/**
 * Font size
 * -----------------------------------------------------------------------------
 * Set a rem font size with pixel fallback
 *
 * Usage:
 *
 *      p {
 *          @include font-size(16px)
 *      }
 *
 * Output:
 *
 *      p {
 *          font-size: 16px;
 *          font-size: 1em;
 *      }
 */

/* @function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
} */

/**
 * Expand element outside its container
 * -----------------------------------------------------------------------------
 * This mixin will force an element to expand full width even if it has
 * a container. See demo here: http://codepen.io/sebastianekstrom/pen/vNjOao/
 *
 * Usage:
 *
 *      img {
 *          @include expand-full-width(16px);
 *      }
 *
 */
/* 
@mixin expand-full-width() {
    width: 100vw;
    margin-left: calc(-50vw + 50%);
}
 */
/**
 * Vertical align
 * -----------------------------------------------------------------------------
 * Vertical align any element by using top: 50% with the combination of
 * translateY(-50%). This will push the element 50% down from its parent,
 * as well as pushing itself down 50% of its own height. This will cause
 * the element to vertically align.
 *
 * Usage:
 *
 *      .logotype {
 *          @include vertical-align();
 *      }
 *
 *      .logotype--absolute {
 *          @include vertical-align(absolute);
 *      }
 *
 */

/* @mixin vertical-align($position: relative) {
    position: $position;
    top: 50%;
    transform: translateY(-50%);
}
 */
/**
 * Visually hide an element
 * -----------------------------------------------------------------------------
 * This placeholder selector will visually hide an element while
 * still make it accessible for screenreaders.
 *
 * Usage:
 *
 *      p {
 *          @extend %visually-hidden;
 *      }
 *
 */
/* 
%visually-hidden,
.visually-hidden {
    position: absolute !important;
    overflow: hidden;
    width: 1px;
    height: 1px;
    padding: 0;
    border: 0;
    clip: rect(1px, 1px, 1px, 1px);
} */

/**
 * Clearfix
 * -----------------------------------------------------------------------------
 * A solid clearfix by Nicolas Gallagher.
 * Source: (http://nicolasgallagher.com/micro-clearfix-hack/)
 *
 * Usage:
 *
 *      p {
 *          @extend %clearfix;
 *      }
 *
 */

 %clearfix,
.clearfix {
    *zoom: 1;

    &:before {
        content: ' ';
        display: table;
    }

    &:after {
        content: ' ';
        display: table;
        clear: both;
    }
}

@mixin clearfix {
  *zoom: 1;

  &:before {
      content: ' ';
      display: table;
  }

  &:after {
    content: ' ';
    display: table;
    clear: both;
  }
}

/**
 * NOT A TESTING MIXIN
 * -----------------------------------------------------------------------------
 *
 */
/* 
@mixin overlay($offset: 0) {
  bottom: $offset;
  left: $offset;
  position: absolute;
  right: $offset;
  top: $offset;
}

@mixin unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
} */


/**
 * Inline List
 * -----------------------------------------------------------------------------
 * Makes a list inline.
 *
 */

/* @mixin inline-list {
  list-style-type: none;
  &, & li {
    margin: 0;
    padding: 0;
    display: inline;
  }
} */

/**
 * Link Colors
 * -----------------------------------------------------------------------------
 * Set all the colors for a link with one mixin call. Order of arguments is:
 * 
 * 1. normal
 * 2. hover
 * 3. ctive
 * 4. visited
 * 5. focus
 *
 * Usage:
 *
 *      a {
 *        @include link-colors($color--link,$color--link-hover);
 *      }
 *
 */

/*
@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {
  color: $normal;
  @if $visited {
    &:visited {
      color: $visited;
    }
  }
  @if $focus {
    &:focus {
      color: $focus;
    }
  }
  @if $hover {
    &:hover {
      color: $hover;
    }
  }
  @if $active {
    &:active {
      color: $active;
    }
  }
}
*/


/**
 * Button types
 * -----------------------------------------------------------------------------
 *
 * Usage:
 *
 *      .button {
 *        @include button(size,corner,color,color2);
 *        @include button-color(color,outlined);
 *      }
 *  1. Small
 *  2. Large
 */
/* 
@mixin button($size: normal, $corner: false) {
  display: inline-block;
  cursor: pointer;
  @if $size == small {
    font-size: $size-small;
    padding: 3px 6px;
    @if $corner {
      @include border-radius(2px);
    }
  }
  @else if $size == large {
    font-size: $size-large;
    padding: 7px 14px;
    @if $corner {
      @include border-radius(3px);
    }
  }
  @else {
    padding: 3px 10px; 
    @if $corner {
      @include border-radius(3px);
    }   
  }
}
@mixin button-color($color, $outline: true) {
  @if $outline {
    border: 1px solid $color;
  }
  @else {  
    background: $color;
  }
}
@mixin button-small {
  border-radius: 2px;
  font-size: 11px;
  height: 24px;
  line-height: 16px;
  padding: 3px 6px;
}

@mixin button-medium {
  font-size: 18px;
  height: 40px;
  padding: 7px 14px;
}

@mixin button-large {
  font-size: 22px;
  height: 48px;
  padding: 11px 20px;
}*/
/*-----------------------------*/
/* @mixin background($type: color, $color: none, $bckg: none) {
  @if $type == color {
    background-color: $color;
  }
  @else if $type == img {
    background-image: url($bckg);
  }
  @else {

  }
} */

/*
* Animation
* -------------
*/

// @keyframes spin-around {
//   from {
//     transform: rotate(0deg);
//   }
//   to {
//     transform: rotate(359deg);
//   }
// } 

/* 
* findColorInvert
* ---------------
*/

/*
@function powerNumber($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function colorLuminance($color) {
  $color-rgb: ('red': red($color),'green': green($color),'blue': blue($color));
  @each $name, $value in $color-rgb {
    $adjusted: 0;
    $value: $value / 255;
    @if $value < 0.03928 {
      $value: $value / 12.92;
    }
    @else {
      $value: ($value + .055) / 1.055;
      $value: powerNumber($value, 2);
    }
    $color-rgb: map-merge($color-rgb, ($name: $value));
  }
  @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722);
}

@function closestEvenNumber($number) {
  @if ($number % 2 == 0px) {
    @return $number;
  }
  @else {
    @return ($number + 1px);
  }
}

@function findColorInvert($color) {
  @if (colorLuminance($color) > 0.8) {
    @return rgba(black, 0.5);
  }
  @else {
    @return white;
  }
}

@mixin arrow($color) {
  border: 1px solid $color;
  border-right: 0;
  border-top: 0;
  content: " ";
  display: block;
  height: 7px;
  pointer-events: none;
  position: absolute;
  transform: rotate(-45deg);
  width: 7px;
}

@mixin fa($size, $dimensions) {
  display: inline-block;
  font-size: $size;
  height: $dimensions;
  line-height: $dimensions;
  text-align: center;
  vertical-align: top;
  width: $dimensions;
}

@mixin center($size) {
  left: 50%;
  margin-left: -($size / 2);
  margin-top: -($size / 2);
  position: absolute;
  top: 50%;
}
 */